export interface NlpManagerInterface {
    addDocument(locale: string, utterance: string, intent: string): any;
    removeDocument(locale: string, utterance: string, intent: string): any;
    addLanguage(locale: string): any;
    removeLanguage(locale: string): any;
    assignDomain(locale: string, intent: string, domain: string): any;
    getIntentDomain(locale: string, intent: string): any;
    getDomains(): any;
    guessLanguage(text: string): any;
    addAction(intent: string, action: any, parameters: any, fn?: any): any;
    getActions(intent: string): any;
    removeAction(intent: string, action: any, parameters: any): any;
    removeActions(intent: string): any;
    addAnswer(locale: string, intent: string, answer: string, opts?: any): any;
    removeAnswer(locale: string, intent: string, answer: string, opts?: any): any;
    findAllAnswers(locale: string, intent: string): any;
    getSentiment(locale: string, utterance: string): any;
    addNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): any;
    removeNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): any;
    addRegexEntity(entityName: string, languages: string[], regex: RegExp): any;
    addBetweenCondition(locale: string, name: string, left: any, right: any, opts: any): any;
    addPositionCondition(locale: string, name: string, position: any, words: string[], opts: any): any;
    addAfterCondition(locale: string, name: string, words: string[], opts: any): any;
    addAfterFirstCondition(locale: string, name: string, words: string[], opts: any): any;
    addAfterLastCondition(locale: string, name: string, words: string[], opts: any): any;
    addBeforeCondition(locale: string, name: string, words: string[], opts: any): any;
    addBeforeFirstCondition(locale: string, name: string, words: string[], opts: any): any;
    addBeforeLastCondition(locale: string, name: string, words: string[], opts: any): any;
    describeLanguage(locale: string, name: string): any;
    train(): any;
    process(locale: string, utterance: string, context?: any, settings?: any): any;
    extractEntities(locale: string, utterance: string, context: any, settings: any): any;
    toObj(): any;
    fromObj(obj: any): any;
    export(minified?: boolean): any;
    import(data: any): any;
    save(srcFileName: string, minified?: boolean): any;
    load(srcFileName: string): any;
    loadExcel(fileName?: string): any;
}